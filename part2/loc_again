#!/usr/bin/env python

import sys
import math
import json
from aruco_msgs.msg import MarkerArray
import rospy
import tf2_ros
from tf.transformations import quaternion_from_euler
from geometry_msgs.msg import TransformStamped, Vector3
import tf
import tf2_geometry_msgs
import numpy as np
from pyquaternion import Quaternion






broadcaster = tf2_ros.TransformBroadcaster()





def transform(msg):

    for marker in msg.markers:
        tc2m = TransformStamped()
        tc2m.header.stamp = rospy.Time.now()
        marker = msg.markers[0]
        tc2m.header.frame_id = 'cf1/camera_link'#
        tc2m.child_frame_id = 'aruco/detected'+str(marker.id)
        global id
        global marker_is_detected
        marker_is_detected = True
        id = marker.id
        tc2m.transform.translation.x = marker.pose.pose.position.x
        tc2m.transform.translation.y = marker.pose.pose.position.y
        tc2m.transform.translation.z = marker.pose.pose.position.z
        tc2m.transform.rotation.x = marker.pose.pose.orientation.x
        tc2m.transform.rotation.y = marker.pose.pose.orientation.y
        tc2m.transform.rotation.z = marker.pose.pose.orientation.z
        tc2m.transform.rotation.w = marker.pose.pose.orientation.w
        broadcaster.sendTransform(tc2m)






rospy.init_node('loc_again.py')
odom_map = TransformStamped()
odom_map.header.stamp = rospy.Time.now()
odom_map.header.frame_id = 'map'
odom_map.child_frame_id = 'cf1/odom'
odom_map.transform.translation.x=0
odom_map.transform.translation.y=0
odom_map.transform.translation.z=0
odom_map.transform.rotation.x = 0
odom_map.transform.rotation.y = 0
odom_map.transform.rotation.z = 0
odom_map.transform.rotation.w = 1








def main():

    
    global odom_map
    print(odom_map)
    

    rospy.Subscriber('/aruco/markers', MarkerArray, transform)
    tfBuffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(tfBuffer)
    
    rate = rospy.Rate(10.0)

    
    while (not rospy.is_shutdown()):
        try:
            #print('detecting the marker')
            markeratmap = 'aruco/marker' + str(id)
            detectedmarker = 'aruco/detected' +str(id)
            
            trans1 = tfBuffer.lookup_transform('cf1/odom',detectedmarker,rospy.Time(0),rospy.Duration(2))
            trans2 = tfBuffer.lookup_transform('map',markeratmap,rospy.Time(0),rospy.Duration(2))

           
            t =TransformStamped()
            t.header.stamp = rospy.Time.now()
            t.header.frame_id = 'map'
            t.child_frame_id = 'cf1/odom'
            t.transform.translation.x = trans2.transform.translation.x-trans1.transform.translation.x
            t.transform.translation.y = trans2.transform.translation.y-trans1.transform.translation.y
            t.transform.translation.z=0
            t.transform.rotation.x = 0
            t.transform.rotation.y = 0
            t.transform.rotation.z = 0
            t.transform.rotation.w = 1


            

            print('detecting the marker')
            #print(t)
            odom_map = t



        except :
            pass


        odom_map.header.stamp = rospy.Time.now()
        br2  =  tf2_ros.TransformBroadcaster()
        print(odom_map)
        br2.sendTransform(odom_map)
        rate.sleep()

if __name__ == "__main__":
    main()
